//File: CosNotification.idl
//Part of the Notification Service

#ifndef _COS_NOTIFICATION_IDL_
#define _COS_NOTIFICATION_IDL_

// omniORB specific pragmas to insert extra includes into the stub header.
// #pragma hh #include "COS_sysdep.h"

#pragma prefix "omg.org"

module CosNotification {

	typedef string Istring;
	typedef Istring PropertyName;
	typedef any PropertyValue;

	struct Property {
		PropertyName name;
		PropertyValue value;
	};
	typedef sequence<Property> PropertySeq;

	// The following are the same, but serve different purposes.
	typedef PropertySeq OptionalHeaderFields;
	typedef PropertySeq FilterableEventBody;
	typedef PropertySeq QoSProperties;
	typedef PropertySeq AdminProperties;

	struct _EventType {
		string domain_name;
		string type_name;
	};
	typedef sequence<_EventType> EventTypeSeq;

	struct PropertyRange {
		PropertyValue low_val;
		PropertyValue high_val;
	};

	struct NamedPropertyRange {
		PropertyName name;
		PropertyRange range;
	};
	typedef sequence<NamedPropertyRange> NamedPropertyRangeSeq;

	enum QoSError_code {
		UNSUPPORTED_PROPERTY,
		UNAVAILABLE_PROPERTY,
		UNSUPPORTED_VALUE,
		UNAVAILABLE_VALUE,
		BAD_PROPERTY,
		BAD_TYPE,
		BAD_VALUE
	};

	struct PropertyError {
		QoSError_code code;
		PropertyName name;
		PropertyRange available_range;
	};
	typedef sequence<PropertyError> PropertyErrorSeq;

	exception UnsupportedQoS { PropertyErrorSeq qos_err; };
	exception UnsupportedAdmin { PropertyErrorSeq admin_err; };

	// Define the Structured Event structure
	struct FixedEventHeader { 
		_EventType event_type;
		string event_name;
	};

	struct EventHeader {
		FixedEventHeader fixed_header;
		OptionalHeaderFields variable_header;
	};

	struct StructuredEvent {
		EventHeader header;
		FilterableEventBody filterable_data;
		any remainder_of_body;
	}; // StructuredEvent
	typedef sequence<StructuredEvent> EventBatch;

	// The following constant declarations define the standard
	// QoS property names and the associated values each property
	// can take on. The name/value pairs for each standard property
	// are grouped, beginning with a string constant defined for the
	// property name, followed by the values the property can take on.



	interface QoSAdmin {

		QoSProperties get_qos();

		void set_qos ( in QoSProperties qos)
			raises ( UnsupportedQoS );

		void validate_qos (
				in QoSProperties required_qos,
				out NamedPropertyRangeSeq available_qos )
			raises ( UnsupportedQoS );

	}; // QosAdmin

	// Admin properties are defined in similar manner as QoS
	// properties. The only difference is that these properties
	// are related to channel administration policies, as opposed 
	// message quality of service


	interface AdminPropertiesAdmin {

		AdminProperties get_admin();

		void set_admin (in AdminProperties admin)
			raises ( UnsupportedAdmin);

	}; // AdminPropertiesAdmin

}; // CosNotification

#endif
