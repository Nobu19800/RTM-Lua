/*
 @file ConfigSample.lns
 @brief コンフィギュレーションパラメータ変更のRTCサンプル
*/



import openrtm_lns;


// RTCの仕様をテーブルで定義する
let configsample_spec = {
	 "implementation_id":"ConfigSample",
	 "type_name":"ConfigSample",
	 "description":"Configuration example component",
	 "version":"1.0",
	 "vendor":"Nobuhiko Miyamoto",
	 "category":"example",
	 "activity_type":"DataFlowComponent",
	 "max_instance":"10",
	 "language":"LuneScript",
	 "lang_type":"script",
         // コンフィギュレーションパラメータは[conf.セット名.パラメータ名]=[値]で指定
         "conf.default.int_param0":"0",
         "conf.default.int_param1":"1",
         "conf.default.double_param0":"0.11",
         "conf.default.double_param1":"9.9",
         "conf.default.str_param0":"hoge",
         "conf.default.str_param1":"dara",
         "conf.default.vector_param0":"0.0,1.0,2.0,3.0,4.0"};







// @class ConfigSample
class ConfigSample extend openrtm_lns.RTObjectBase {
    let mut _int_param0:openrtm_lns.config_int;
    let mut _int_param1:openrtm_lns.config_int;
    let mut _double_param0:openrtm_lns.config_real;
    let mut _double_param1:openrtm_lns.config_real;
    let mut _str_param0:openrtm_lns.config_str;
    let mut _str_param1:openrtm_lns.config_str;
    let mut _vector_param0:openrtm_lns.config_vector;
    // コンストラクタ
    // @param manager マネージャ
    pub fn __init( manager: openrtm_lns.Manager ) {
        super( manager );
        self._int_param0 = new openrtm_lns.config_int(0);
        self._int_param1 = new openrtm_lns.config_int(1);
        self._double_param0 = new openrtm_lns.config_real(0.11);
        self._double_param1 = new openrtm_lns.config_real(9.9);
        self._str_param0 = new openrtm_lns.config_str("hoge");
        self._str_param1 = new openrtm_lns.config_str("dara");
        self._vector_param0 = new openrtm_lns.config_vector([0.0, 1.0, 2.0, 3.0, 4.0]);
    }
    // 初期化時のコールバック関数
    // @return リターンコード
    pub override fn onInitialize() mut : openrtm_lns.ReturnCode_t {
        self.bindParameter_int("int_param0", self._int_param0, "0");
        self.bindParameter_int("int_param1", self._int_param1, "1");
        self.bindParameter_real("double_param0", self._double_param0, "0.11");
        self.bindParameter_real("double_param1", self._double_param1, "9.9");
        self.bindParameter_str("str_param0", self._str_param0, "hoge");
        self.bindParameter_str("str_param1", self._str_param1, "dara");
        self.bindParameter_vec("vector_param0", self._vector_param0, "0.0,1.0,2.0,3.0,4.0");
        print("\n Please change configuration values from RTSystemEditor");
        return openrtm_lns.ReturnCode_t.RTC_OK;
    }

    // アクティブ状態の時の実行関数
    // @param ec_id 実行コンテキストのID
    // @return リターンコード
    pub override fn onExecute(ec_id:int) mut : openrtm_lns.ReturnCode_t {
        let c = "                    ";
        //print("---------------------------------------");
        //print(" Active Configuration Set: ", self._configsets.getActiveId(),c);
        //print("---------------------------------------");

        print("int_param0:       ", self._int_param0._value, c);
        print("int_param1:       ", self._int_param1._value, c);
        print("double_param0:    ", self._double_param0._value, c);
        print("double_param1:    ", self._double_param1._value, c);
        print("str_param0:       ", self._str_param0._value, c);
        print("str_param1:       ", self._str_param1._value, c);


        foreach value,idx in self._vector_param0._value {
            print("vector_param0[", idx, "]: ", value, c);
        }

        print("---------------------------------------");

        //print("Updating.... ", ticktack(), c);
        return openrtm_lns.ReturnCode_t.RTC_OK;
    }
}


fn ConfigSampleCreate( manager:openrtm_lns.Manager ) : &openrtm_lns.RTObject_lns {
    let rtobj = new ConfigSample(manager);
    return rtobj.getComp();
}


pub fn ConfigSampleInit( manager: openrtm_lns.Manager ) {
    let prof = openrtm_lns.Properties.new(configsample_spec);
    manager.registerFactory(prof, ConfigSampleCreate, openrtm_lns.Factory.Delete);
}

fn MyModuleInit( manager:openrtm_lns.Manager ) {
    ConfigSampleInit(manager);
    let comp = manager.createComponent("ConfigSample");
}


openrtm_lns.Manager.init([]);
openrtm_lns.Manager.setModuleInitProc(MyModuleInit);
openrtm_lns.Manager.activateManager();
openrtm_lns.Manager.runManager();


