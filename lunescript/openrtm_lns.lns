pub module Factory require 'openrtm.Factory' {
    pub static fn Delete( rtc:stem ): nil;
}

pub module RTCUtil require 'openrtm.RTCUtil' {
    pub static fn instantiateDataType( data_type:str ): stem!;
}


pub interface OutPort_lns {
    pub fn write(value:Map<str,stem>!) : bool;
}

pub interface InPort_lns {
    pub fn isNew() : bool;
    pub fn read() : Map<str,stem>;
}


pub interface CorbaConsumer_lns {
}

pub interface CorbaProvider_lns {
}


pub interface CorbaPort_lns {
    pub fn registerConsumer(instance_name:str, type_name:str, consumer:&CorbaConsumer_lns, idl_file:str) : bool;
    pub fn registerProvider(instance_name:str, type_name:str, consumer:&CorbaProvider_lns, idl_file:str, interface_type:str) : bool;
}


pub module OutPort require 'openrtm.OutPort' {
    pub static fn new( name:str, value:stem, data_type:str, buffer:stem! ): OutPort_lns;
    pub static fn setTimestamp(data:&Map<str,stem>);
}

pub module InPort require 'openrtm.InPort' {
    pub static fn new( name:str, value:stem, data_type:str, buffer:stem!, read_block:bool!, write_block:bool!, read_timeout:int!, write_timeout:int! ): InPort_lns;
}


pub module CorbaPort require 'openrtm.CorbaPort' {
    pub static fn new( name:str ): CorbaPort_lns;
}


pub module Manager require 'openrtm.Manager' {
    pub fn init( argv:str[] ): nil;
    pub fn setModuleInitProc( proc:stem ): nil;
    pub fn activateManager( ): nil;
    pub fn runManager( ): nil;
    pub fn registerFactory( profile:stem!, new_func:stem, delete_func:stem ): stem!;
    pub fn createComponent( comp_args:str ): stem!;
}



pub enum ReturnCode_t {
    RTC_OK,
    RTC_ERROR,
    BAD_PARAMETER,
    UNSUPPORTED,
    OUT_OF_RESOURCES,
    PRECONDITION_NOT_MET
}



pub class config_int {
    pub let mut _value:int;
    pub fn __init( value: int ) {
        self._value = value;
    }
}

pub class config_real {
    pub let mut _value:real;
    pub fn __init( value: real ) {
        self._value = value;
    }
}

pub class config_str {
    pub let mut _value:str;
    pub fn __init( value: str ) {
        self._value = value;
    }
}

pub class config_vector {
    pub let mut _value:real[];
    pub fn __init( value: real[] ) {
        self._value = value;
    }
}


pub interface RTObject_lns {
    pub fn addOutPort(name:str, outport:&OutPort_lns) : bool;
    pub fn addInPort(name:str, outport:&InPort_lns) : bool;
    pub fn addPort(port:&CorbaPort_lns) : bool;
    pub fn bindParameter_int(param_name:str, var:&config_int, def_val:str, trans:stem!) : bool;
    pub fn bindParameter_real(param_name:str, var:&config_real, def_val:str, trans:stem!) : bool;
    pub fn bindParameter_str(param_name:str, var:&config_str, def_val:str, trans:stem!) : bool;
    pub fn bindParameter_vec(param_name:str, var:&config_vector, def_val:str, trans:stem!) : bool;
}


pub module RTObject require 'openrtm_lns.RTObject' {
    pub fn new( manager:Manager, comp:stem ): RTObject_lns;
}


pub class RTObjectBase {
    let mut comp:RTObject_lns;
    pub fn __init( manager: Manager ) {
        self.comp = unwrap RTObject.new(manager, self);
    }
    pub fn addOutPort(name:str, outport:&OutPort_lns) : bool {
        return self.comp.addOutPort(name, outport);
    }
    pub fn addInPort(name:str, inport:&InPort_lns) : bool {
        return self.comp.addInPort(name, inport);
    }
    pub fn addPort(port:&CorbaPort_lns) : bool {
        return self.comp.addPort(port);
    }

    pub fn bindParameter_int(param_name:str, var:&config_int, def_val:str, trans:stem!) : bool {
        return self.comp.bindParameter_int(param_name, var, def_val, trans);
    }
    pub fn bindParameter_real(param_name:str, var:&config_real, def_val:str, trans:stem!) : bool {
        return self.comp.bindParameter_real(param_name, var, def_val, trans);
    }
    pub fn bindParameter_str(param_name:str, var:&config_str, def_val:str, trans:stem!) : bool {
        return self.comp.bindParameter_str(param_name, var, def_val, trans);
    }
    pub fn bindParameter_vec(param_name:str, var:&config_vector, def_val:str, trans:stem!) : bool {
        return self.comp.bindParameter_vec(param_name, var, def_val, trans);
    }
    pub fn getComp() :&RTObject_lns {
       return self.comp;
    }

    pub fn onInitialize() mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onFinalize() mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onStartup(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onShutdown(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onActivated(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onDeactivated(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onExecute(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onAborting(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onError(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onReset(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onStateUpdate(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
    pub fn onRateChanged(ec_id:int) mut : ReturnCode_t {
        return ReturnCode_t.RTC_OK;
    }
}


pub module Properties require 'openrtm_lns.Properties' {
   pub fn new( defaults_map:&Map<str,str> ): stem!;
}

pub module Timer require 'openrtm.Timer' {
    pub fn sleep( time:real );
}

