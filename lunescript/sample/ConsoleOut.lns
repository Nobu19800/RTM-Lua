/*
 @file ConsoleOut.lns
 @brief インポート入力のRTCサンプル
*/

import openrtm_lns;






// RTCの仕様をテーブルで定義する
let consoleout_spec = {
	 "implementation_id":"ConsoleOut",
	 "type_name":"ConsoleOut",
	 "description":"Console output component",
	 "version":"1.0",
	 "vendor":"Nobuhiko Miyamoto",
	 "category":"example",
	 "activity_type":"DataFlowComponent",
	 "max_instance":"10",
	 "language":"LuneScript",
	 "lang_type":"script"};



// @class ConsoleOut
class ConsoleOut extend openrtm_lns.RTObjectBase {
   let mut _d_in:Map<str,stem>;
   let mut _inIn:openrtm_lns.InPort_lns;
    // コンストラクタ
    // @param manager マネージャ
    pub fn __init( manager: openrtm_lns.Manager ) {
        super( manager );
        self._d_in = {"tm":{"sec":0,"nsec":0},"data":0};
        self._inIn = unwrap openrtm_lns.InPort.new("in",self._d_in,"::RTC::TimedLong");
    }

    // 初期化時のコールバック関数
    // @return リターンコード
    pub override fn onInitialize() mut : openrtm_lns.ReturnCode_t {
        self.addInPort("in",self._inIn);
        return openrtm_lns.ReturnCode_t.RTC_OK;
    }

    // アクティブ状態の時の実行関数
    // @param ec_id 実行コンテキストのID
    // @return リターンコード
    pub override fn onExecute(ec_id:int) mut : openrtm_lns.ReturnCode_t {
        // バッファに新規データがあるかを確認
        if self._inIn.isNew() {
             // データ読み込み
             let data = self._inIn.read();
             print("Received: ", data);
             print("Received: ", data.data);
             let tm:Map<str,int> = unwrap data.tm default {"sec":0,"nsec":0};
             print("TimeStamp: ", tm.sec, "[s] ", tm.nsec, "[ns]");
        }

        return openrtm_lns.ReturnCode_t.RTC_OK;
    }
}



fn ConsoleOutCreate( manager:openrtm_lns.Manager ) : &openrtm_lns.RTObject_lns {
    let rtobj = new ConsoleOut(manager);
    return rtobj.getComp();
}


pub fn ConsoleOutInit( manager: openrtm_lns.Manager ) {
    let prof = openrtm_lns.Properties.new(consoleout_spec);
    manager.registerFactory(prof, ConsoleOutCreate, openrtm_lns.Factory.Delete);
}

fn MyModuleInit( manager:openrtm_lns.Manager ) {
    ConsoleOutInit(manager);
    let comp = manager.createComponent("ConsoleOut");
}



openrtm_lns.Manager.init([]);
openrtm_lns.Manager.setModuleInitProc(MyModuleInit);
openrtm_lns.Manager.activateManager();
openrtm_lns.Manager.runManager();