cmake_minimum_required(VERSION 2.8)
if(POLICY CMP0040)
  cmake_policy(SET CMP0040 OLD)
endif()
if(POLICY CMP0053)
  cmake_policy(SET CMP0053 OLD)
endif()

project(${rtcParam.name})
string(TOLOWER ${dol}{PROJECT_NAME} PROJECT_NAME_LOWER)
include("${dol}{PROJECT_SOURCE_DIR}/cmake/utils.cmake")
set(PROJECT_VERSION ${rtcParam.version} CACHE STRING "${rtcParam.name} version")
set(UPGRADE_GUID "")
DISSECT_VERSION()
set(PROJECT_SHORT_VER ${PROJECT_VERSION_MAJOR}${PROJECT_VERSION_MINOR}${PROJECT_VERSION_REVISION})
set(PROJECT_DESCRIPTION "${rtcParam.description}")
set(PROJECT_VENDOR "${rtcParam.vender}")
#if( ${rtcParam.docCreator.length()} > 0 )
set(PROJECT_MAINTAINER "${rtcParam.docCreator}")
#else
set(PROJECT_MAINTAINER "unknown")
#end
set(PROJECT_TYPE "lua/${rtcParam.category}")

find_package(OpenRTM)
set(RTM_VER ${dol}{OPENRTM_VERSION})
set(RTM_SHORT_VER ${dol}{OPENRTM_VERSION_MAJOR}${dol}{OPENRTM_VERSION_MINOR}${dol}{OPENRTM_VERSION_PATCH})

function(get_dist ARG0)
  if(NOT ${dol}{CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(${dol}{ARG0} ${dol}{CMAKE_SYSTEM_NAME} PARENT_SCOPE)
    return()
  endif()
  foreach(dist Debian Ubuntu RedHat Fedora CentOS Raspbian)
    execute_process(
      COMMAND grep ${dol}{dist} -s /etc/issue /etc/os-release /etc/redhat-release /etc/system-release
      OUTPUT_VARIABLE dist_name
      )
    if(${dol}{dist_name} MATCHES ${dol}{dist})
      set(${dol}{ARG0} ${dol}{dist} PARENT_SCOPE)
      return()
    endif()
  endforeach()
endfunction(get_dist)

function(get_pkgmgr ARG0)
  get_dist(DIST_NAME)
  if(${dol}{DIST_NAME} MATCHES "Debian" OR
     ${dol}{DIST_NAME} MATCHES "Ubuntu" OR
     ${dol}{DIST_NAME} MATCHES "Raspbian")
     set(${dol}{ARG0} "DEB" PARENT_SCOPE)
     return()
  endif()
  if(${dol}{DIST_NAME} MATCHES "RedHat" OR
     ${dol}{DIST_NAME} MATCHES "Fedora" OR
     ${dol}{DIST_NAME} MATCHES "CentOS")
     set(${dol}{ARG0} "RPM" PARENT_SCOPE)
     return()
  endif()
endfunction(get_pkgmgr)

get_dist(DIST_NAME)
MESSAGE(STATUS "Distribution is ${dol}{DIST_NAME}")

get_pkgmgr(PKGMGR)
if(PKGMGR AND NOT LINUX_PACKAGE_GENERATOR)
 set(LINUX_PACKAGE_GENERATOR ${dol}{PKGMGR})
 if(${dol}{PKGMGR} MATCHES "DEB")
   execute_process(COMMAND dpkg --print-architecture
     OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE
     OUTPUT_STRIP_TRAILING_WHITESPACE)
   message(STATUS "Package manager is ${dol}{PKGMGR}. Arch is ${dol}{CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.")
 endif()
 if(${dol}{PKGMGR} MATCHES "RPM")
   execute_process(COMMAND uname "-m"
     OUTPUT_VARIABLE CPACK_RPM_PACKAGE_ARCHITECTURE
     OUTPUT_STRIP_TRAILING_WHITESPACE)
   message(STATUS "Package manager is ${dol}{PKGMGR}. Arch is ${dol}{CPACK_RPM_PACKAGE_ARCHITECTURE}.")
 endif()
endif()

option(BUILD_DOCUMENTATION "Build the documentation" OFF)

#if(${rtcParam.servicePorts.size()}>0)
set(IDL_FILES ""
#foreach($p in ${rtcParam.providerIdlPathes})
              ${p.idlFile}
#end
#foreach($p in ${rtcParam.consumerIdlPathes})
              ${p.idlFile}
#end)
#end

set(EXEC_FILES ""
               ${rtcParam.name}.lua
)

set(OTHER_SRCS CMakeLists.txt
               RTC.xml ${rtcParam.name}.conf rtc.conf)

${sharp} check lua installed
find_package(Lua51)

if(WIN32)
   set(OPENRTM_SHARE_PREFIX "OpenRTM-aist/${dol}{RTM_VER}/Components/${dol}{PROJECT_TYPE}")
   set(INSTALL_PREFIX ${dol}{PROJECT_NAME})
   if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
      set(CMAKE_INSTALL_PREFIX "${dol}{OPENRTM_DIR}/Components/${dol}{PROJECT_TYPE}/${dol}{PROJECT_NAME}" CACHE PATH "..." FORCE)
   endif()
else()
   set(OPENRTM_SHARE_PREFIX "share/openrtm-${dol}{OPENRTM_VERSION_MAJOR}.${dol}{OPENRTM_VERSION_MINOR}")
   set(INSTALL_PREFIX "${dol}{OPENRTM_SHARE_PREFIX}/components/${dol}{PROJECT_TYPE}/${dol}{PROJECT_NAME}")
endif()

#if(${rtcParam.servicePorts.size()}>0)
${sharp} postinst, prerm settings
if(UNIX)
		configure_file(${dol}{CMAKE_CURRENT_SOURCE_DIR}/postinst.in
			${dol}{CMAKE_CURRENT_SOURCE_DIR}/postinst @ONLY
		)
		configure_file(${dol}{CMAKE_CURRENT_SOURCE_DIR}/prerm.in
			  ${dol}{CMAKE_CURRENT_SOURCE_DIR}/prerm @ONLY
		)
endif()

add_custom_target( ${dol}{PROJECT_NAME} ALL
  COMMAND ${dol}{CMAKE_COMMAND} -E make_directory ${dol}{PROJECT_BINARY_DIR}/idl
  COMMAND ${dol}{CMAKE_COMMAND} -E copy_directory
      ${dol}{PROJECT_SOURCE_DIR}/idl ${dol}{PROJECT_BINARY_DIR}/idl
)
#end

foreach(target ${dol}{EXEC_FILES})
  add_custom_command( TARGET ${dol}{PROJECT_NAME} POST_BUILD
    COMMAND ${dol}{CMAKE_COMMAND} -E copy
        ${dol}{PROJECT_SOURCE_DIR}/${dol}{target} ${dol}{PROJECT_BINARY_DIR}
  )
endforeach()

install(PROGRAMS ${dol}{EXEC_FILES} DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT component)

install(FILES ${dol}{PROJECT_SOURCE_DIR}/RTC.xml DESTINATION ${dol}{INSTALL_PREFIX}
        COMPONENT component)

#if(${rtcParam.servicePorts.size()}>0)
install(DIRECTORY idl DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT component)
#end

${sharp} add uninstall target
configure_file(
    "${dol}{CMAKE_CURRENT_SOURCE_DIR}/cmake/uninstall_target.cmake.in"
    "${dol}{CMAKE_CURRENT_BINARY_DIR}/uninstall_target.cmake"
    IMMEDIATE @ONLY)
add_custom_target(uninstall COMMAND
    ${dol}{CMAKE_COMMAND} -P ${dol}{CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)

if(WIN32)
    ${sharp} start menu
    set_property(INSTALL "${dol}{INSTALL_PREFIX}/${dol}{PROJECT_NAME}.lua"
        PROPERTY CPACK_START_MENU_SHORTCUTS "${dol}{PROJECT_NAME}.lua")
endif()

${sharp} target settings for document
if(BUILD_DOCUMENTATION)
    add_subdirectory(doc)
endif(BUILD_DOCUMENTATION)

#if(${rtcParam.servicePorts.size()}>0)
if(UNIX)
    set(CPACK_GENERATOR "${dol}{LINUX_PACKAGE_GENERATOR}")
    if(CPACK_DEBIAN_PACKAGE_ARCHITECTURE)
				set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${dol}{CMAKE_SOURCE_DIR}/postinst;${dol}{CMAKE_SOURCE_DIR}/prerm")
    endif(CPACK_DEBIAN_PACKAGE_ARCHITECTURE)
    if(CPACK_RPM_PACKAGE_ARCHITECTURE)
        set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${dol}{CMAKE_SOURCE_DIR}/postinst")
        set(CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE "${dol}{CMAKE_SOURCE_DIR}/prerm")
    endif(CPACK_RPM_PACKAGE_ARCHITECTURE)
endif()

set(WIX_PATCH_FILE "${dol}{CMAKE_CURRENT_BINARY_DIR}/wix_patch.xml")
configure_file("cmake/wix_patch.xml.in"
           ${dol}{WIX_PATCH_FILE} @ONLY)
#end

set(cpack_options "${dol}{PROJECT_BINARY_DIR}/cpack_options.cmake")
configure_file("${dol}{PROJECT_SOURCE_DIR}/cmake/cpack_options.cmake.in"
    ${dol}{cpack_options} @ONLY)

set(CPACK_PROJECT_CONFIG_FILE ${dol}{cpack_options})
include(${dol}{CPACK_PROJECT_CONFIG_FILE})
include(CPack)
