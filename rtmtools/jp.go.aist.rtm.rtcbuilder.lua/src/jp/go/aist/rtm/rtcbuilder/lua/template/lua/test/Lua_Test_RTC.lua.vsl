---------------------------------
--! @file ${rtcParam.name}Test.py
--! @brief ${rtcParam.description}
#set( $Date$ = "dummy" )
--! @date \$Date$

#if( ${rtcParam.docCreator.length()} > 0 )
--! @author ${tmpltHelperPy.convertAuthorDocPy(${rtcParam.docCreator})}
#end
#if( ${rtcParam.docLicense.length()} > 0 )

--! ${tmpltHelperPy.convertDocPy(${rtcParam.docLicense})}
#end
---------------------------------

local openrtm  = require "openrtm"



-- Import Service implementation class
-- <rtc-template block="service_impl">
#foreach($consumerIdlFile in ${rtcParam.consumerIdlPathes})
local ${tmpltHelper.getFilenameNoExt(${consumerIdlFile.idlFile})}_idl_example = require "${tmpltHelper.getFilenameNoExt(${consumerIdlFile.idlFile})}_idl_example"
#end


-- </rtc-template>


-- This module's spesification
-- <rtc-template block="module_spec">
local ${luaConv.convToLower(${rtcParam.name})}test_spec = {["implementation_id"]="${rtcParam.name}Test", 
		 ["type_name"[="${rtcParam.name}Test", 
		 ["description"]="${rtcParam.description}",
		 ["version"]="${rtcParam.version}",
		 ["vendor"]="${rtcParam.vender}",
		 ["category"]="${rtcParam.category}",
		 ["activity_type"]="${rtcParam.componentType}",
		 ["max_instance"]="${rtcParam.maxInstance}",
		 ["language"]="Lua",
		 ["lang_type"]="SCRIPT",
#foreach($configParam in ${rtcParam.configParams})
		 ["conf.default.${configParam.name}"]="${configParam.defaultVal}",
#end
#if( ${rtcParam.configParams.size()} > 0 )
#foreach($configParam in ${rtcParam.configParams})
#if( ${configParam.widget.length()} > 0 )
		 ["conf.__widget__.${configParam.name}"]="${configParam.widget}#if( ${configParam.step.length()} > 0 ).${configParam.step}#end",
#end
#end
#foreach($configParam in ${rtcParam.configParams})
#if( ${configParam.constraint.length()} > 0 )
		 ["conf.__constraints__.${configParam.name}"]="${configParam.constraint}",
#end
#end
#foreach($configParam in ${rtcParam.configParams})
         ["conf.__type__.${configParam.name}"]="${configParam.type}",
#end
#end
#if( ${rtcParam.configParameterParams.size()} > 0 )
#foreach($parameterParam in ${rtcParam.configParameterParams})
#if( ${parameterParam.isNonPeriodic()} )
		 ["${parameterParam.configName}"]="${parameterParam.defaultVal}",
#end
#end
#end
		 ""}
-- </rtc-template>

-- @class ${rtcParam.name}Test
-- @brief ${rtcParam.description}
#if( ${rtcParam.docDescription.length()} > 0 )
--
-- ${tmpltHelperLua.convertModuleDocLua(${rtcParam.docDescription})}
#end
#if( ${rtcParam.docInOut.length()} > 0 )
--
-- ${tmpltHelperLua.convertModuleDocLua(${rtcParam.docInOut})}
#end
#if( ${rtcParam.docAlgorithm.length()} > 0 )
--
-- ${tmpltHelperLua.convertModuleDocLua(${rtcParam.docAlgorithm})}
#end
#if( ${rtcParam.docReference.length()} > 0 )
--
-- ${tmpltHelperLua.convertModuleDocLua(${rtcParam.docReference})}
#end
local ${rtcParam.name}Test = {}
${rtcParam.name}Test.new = function(manager)
	local obj = {}
	setmetatable(obj, {__index=openrtm.RTObject.new(manager)})

#foreach($IdlFile in ${allIdlFileParam})
#if(${IdlFile.dataPort})
	manager:loadIdLFile("idl/${tmpltHelper.getFileName(${IdlFile.IdlFile})}")
#end
#end


#foreach($port in ${rtcParam.outports})
	obj._d_${port.tmplVarName} = openrtm.RTCUtil.instantiateDataType("${luaConv.getDataportInitMethodName(${port.type})}")
	--[[
#if(${port.docDescription.length()}>0)		${tmpltHelperLua.convertDescDocLua(${port.docDescription})}
#end
#if(${port.docType.length()}>0)		 - Type: ${tmpltHelperLua.convertTypeDocLua(${port.docType})}
#end
#if(${port.docNum.length()}>0)		 - Number: ${tmpltHelperLua.convertNumberDocLua(${port.docNum})}
#end
#if(${port.docSemantics.length()}>0)		 - Semantics: ${tmpltHelperLua.convertSemanticsDocLua(${port.docSemantics})}
#end
#if(${port.docUnit.length()}>0)		 - Unit: ${tmpltHelperLua.convertTypeDocLua(${port.docUnit})}
#end
#if(${port.docOccurrence.length()}>0)		 - Frequency: ${tmpltHelperLua.convertFrequencyDocLua(${port.docOccurrence})}
#end
#if(${port.docOperation.length()}>0)		 - Operation Cycle: ${tmpltHelperLua.convertCycleDocLua(${port.docOperation})}
#end
	--]]
	obj._${port.name}In = openrtm.InPort.new("${port.name}", obj._d_${port.tmplVarName}, "${luaConv.getDataportInitMethodName(${port.type})}")
#end
#foreach($port in ${rtcParam.inports})
	obj._d_${port.tmplVarName} = openrtm.RTCUtil.instantiateDataType("${luaConv.getDataportInitMethodName(${port.type})}")
	--[[
#if(${port.docDescription.length()}>0)		${tmpltHelperLua.convertDescDocLua(${port.docDescription})}
#end
#if(${port.docType.length()}>0)		 - Type: ${tmpltHelperLua.convertTypeDocLua(${port.docType})}
#end
#if(${port.docNum.length()}>0)		 - Number: ${tmpltHelperLua.convertNumberDocLua(${port.docNum})}
#end
#if(${port.docSemantics.length()}>0)		 - Semantics: ${tmpltHelperLua.convertSemanticsDocLua(${port.docSemantics})}
#end
#if(${port.docUnit.length()}>0)		 - Unit: ${tmpltHelperLua.convertTypeDocLua(${port.docUnit})}
#end
#if(${port.docOccurrence.length()}>0)		 - Frequency: ${tmpltHelperLua.convertFrequencyDocLua(${port.docOccurrence})}
#end
#if(${port.docOperation.length()}>0)		 - Operation Cycle: ${tmpltHelperLua.convertCycleDocLua(${port.docOperation})}
#end
	--]]
	obj._${port.name}Out = openrtm.OutPort.new("${port.name}", obj._d_${port.tmplVarName}, "${luaConv.getDataportInitMethodName(${port.type})}")
#end

#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
	--[[
#if(${servicePort.docDescription.length()}>0)		${tmpltHelperLua.convertDescDocLua(${servicePort.docDescription})}
#end
#if(${servicePort.docIfDescription.length()}>0)		Interface: ${tmpltHelperLua.convertInterfaceLua(${servicePort.docIfDescription})}
#end
	--]]
	obj._${servicePort.name}Port = openrtm.CorbaPort.new("${servicePort.name}")
#end#end#end

#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==1)
	--[[
#if(${serviceInterface.docDescription.length()}>0)		${tmpltHelperLua.convertDescDocLua(${serviceInterface.docDescription})}
#end
#if(${serviceInterface.docArgument.length()}>0)		 - Argument:      ${tmpltHelperLua.convertDetailLua(${serviceInterface.docArgument})}
#end
#if(${serviceInterface.docReturn.length()}>0)		 - Return Value:  ${tmpltHelperLua.convertDetailLua(${serviceInterface.docReturn})}
#end
#if(${serviceInterface.docException.length()}>0)		 - Exception:     ${tmpltHelperLua.convertDetailLua(${serviceInterface.docException})}
#end
#if(${serviceInterface.docPreCondition.length()}>0)		 - PreCondition:  ${tmpltHelperLua.convertDetailLua(${serviceInterface.docPreCondition})}
#end
#if(${serviceInterface.docPostCondition.length()}>0)		 - PostCondition: ${tmpltHelperLua.convertDetailLua(${serviceInterface.docPostCondition})}
#end
	--]]
	obj._${serviceInterface.tmplVarName} = ${tmpltHelper.getFilenameNoExt(${serviceInterface.IdlFile})}_idl_example.${tmpltHelper.getBasename(${serviceInterface.interfaceType})}_i.new()
#end#end#end#end#end


#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==0)
	--[[
#if(${serviceInterface.docDescription.length()}>0)		${tmpltHelperLua.convertDescDocLua(${serviceInterface.docDescription})}
#end
#if(${serviceInterface.docArgument.length()}>0)		 - Argument:      ${tmpltHelperLua.convertDetailLua(${serviceInterface.docArgument})}
#end
#if(${serviceInterface.docReturn.length()}>0)		 - Return Value:  ${tmpltHelperLua.convertDetailLua(${serviceInterface.docReturn})}
#end
#if(${serviceInterface.docException.length()}>0)		 - Exception:     ${tmpltHelperLua.convertDetailLua(${serviceInterface.docException})}
#end
#if(${serviceInterface.docPreCondition.length()}>0)		 - PreCondition:  ${tmpltHelperLua.convertDetailLua(${serviceInterface.docPreCondition})}
#end
#if(${serviceInterface.docPostCondition.length()}>0)		 - PostCondition: ${tmpltHelperLua.convertDetailLua(${serviceInterface.docPostCondition})}
#end
	--]]
	obj._${serviceInterface.tmplVarName} = openrtm.CorbaConsumer.new("${tmpltHelperLua.convertServiceInterfaceName(${serviceInterface.interfaceType})}")
#end#end#end#end#end

	-- initialize of configuration-data.
	-- <rtc-template block="init_conf_param">
#foreach($configParam in ${rtcParam.configParams})
	--[[
		${tmpltHelperLua.convertDescDocLua(${configParam.docDescription})}
		 - Name: ${configParam.docDataName} ${configParam.tmplVarName}
		 - DefaultValue: ${configParam.defaultVal}
#if(${configParam.docUnit.length()}>0)		 - Unit: ${tmpltHelperLua.convertUnitDocLua(${configParam.docUnit})}
#end
#if(${configParam.docRange.length()}>0)		 - Range: ${tmpltHelperLua.convertRangeDocLua(${configParam.docRange})}
#end
#if(${configParam.docConstraint.length()}>0)		 - Constraint: ${tmpltHelperLua.convertConstraintDocLua(${configParam.docConstraint})}
#end
	--]]
	obj._${configParam.tmplVarName} = {_value=${luaConv.convDefaultVal(${configParam})}}
#end

	-- </rtc-template>
		 
#if(${rtcParam.getDocActionOverView(0).length()}>0)	-- ${tmpltHelperLua.convertDescDocLua(${rtcParam.getDocActionOverView(0)})}
#end
	--
	-- The initialize action (on CREATED->ALIVE transition)
	-- formaer rtc_init_entry()
	--
	-- @return RTC::ReturnCode_t
	--
#if(${rtcParam.getDocActionPreCondition(0).length()}>0)	-- @pre ${tmpltHelperLua.convertPreDocLua(${rtcParam.getDocActionPreCondition(0)})}
#end
#if(${rtcParam.getDocActionPostCondition(0).length()}>0)	-- @post ${tmpltHelperLua.convertPostDocLua(${rtcParam.getDocActionPostCondition(0)})}
#end
	--
	function obj:onInitialize()
		-- Bind variables and configuration variable
#foreach($configParam in ${rtcParam.configParams})
		self:bindParameter("${configParam.name}", self._${configParam.tmplVarName}, "${configParam.defaultVal}")
#end

		-- Set OutPort buffers
#foreach($port in ${rtcParam.outports})
		self:addInPort("${port.name}",self._${port.name}In)
#end

		-- Set InPort buffers
#foreach($port in ${rtcParam.inports})
		self:addOutPort("${port.name}",self._${port.name}Out)
#end

		-- Set service provider to Ports
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==1)
		self._${servicePort.name}Port:registerProvider("${serviceInterface.name}", "${serviceInterface.interfaceType}", self._${serviceInterface.tmplVarName}, "idl/${tmpltHelper.getFileName(${serviceInterface.IdlFile})}", "${tmpltHelperLua.convertServiceInterfaceName(${serviceInterface.interfaceType})}")
#end#end#end#end#end

		-- Set service consumers to Ports
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==0)
		self._${servicePort.name}Port:registerConsumer("${serviceInterface.name}", "${serviceInterface.interfaceType}", self._${serviceInterface.tmplVarName}, "idl/${tmpltHelper.getFileName(${serviceInterface.IdlFile})}")
#end#end#end#end#end

		-- Set CORBA Service Ports
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
		self:addPort(self._${servicePort.name}Port)
#end#end#end
#if(${tmpltHelper.checkDetailContent(0,${rtcParam})})		${rtcParam.getDetailContent(0)}
#end

		return self._ReturnCode_t.RTC_OK
	end

#if(${rtcParam.getDocActionOverView(1).length()}>0)	#if(${rtcParam.IsNotImplemented(1)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(1)})}
#end
	#if(${rtcParam.IsNotImplemented(1)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(1)})--	#end${minusminus} The finalize action (on ALIVE->END transition)
	#if(${rtcParam.IsNotImplemented(1)})--	#end${minusminus} formaer rtc_exiting_entry()
	#if(${rtcParam.IsNotImplemented(1)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(1)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(1)})--#end

#if(${rtcParam.getDocActionPreCondition(1).length()}>0)	#if(${rtcParam.IsNotImplemented(1)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(1)})}
#end
#if(${rtcParam.getDocActionPostCondition(1).length()}>0)	#if(${rtcParam.IsNotImplemented(1)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(1)})}
#end
	#if(${rtcParam.IsNotImplemented(1)})--	#end--
	#if(${rtcParam.IsNotImplemented(1)})--	#end${function} obj:onFinalize()
	#if(${rtcParam.IsNotImplemented(1)})--	#end
#if(${tmpltHelper.checkDetailContent(1,${rtcParam})})		${rtcParam.getDetailContent(1)}
#end

	#if(${rtcParam.IsNotImplemented(1)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(1)})--	#end${end}

#if(${rtcParam.getDocActionOverView(2).length()}>0)	#if(${rtcParam.IsNotImplemented(2)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(2)})}
#end
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus} The startup action when ExecutionContext startup
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus} former rtc_starting_entry()
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(2).length()}>0)	#if(${rtcParam.IsNotImplemented(2)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(2)})}
#end
#if(${rtcParam.getDocActionPostCondition(2).length()}>0)	#if(${rtcParam.IsNotImplemented(2)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(2)})}
#end
	#if(${rtcParam.IsNotImplemented(2)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(2)})--	#end${function} obj:onStartup(ec_id)
	#if(${rtcParam.IsNotImplemented(2)})--	#end
#if(${tmpltHelper.checkDetailContent(2,${rtcParam})})		${rtcParam.getDetailContent(2)}
#end

	#if(${rtcParam.IsNotImplemented(2)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(2)})--	#end${end}

#if(${rtcParam.getDocActionOverView(3).length()}>0)	#if(${rtcParam.IsNotImplemented(3)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(3)})}
#end
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus} The shutdown action when ExecutionContext stop
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus} former rtc_stopping_entry()
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(3).length()}>0)	#if(${rtcParam.IsNotImplemented(3)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(3)})}
#end
#if(${rtcParam.getDocActionPostCondition(3).length()}>0)	#if(${rtcParam.IsNotImplemented(3)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(3)})}
#end
	#if(${rtcParam.IsNotImplemented(3)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(3)})--	#end${function} obj:onShutdown(ec_id)
	#if(${rtcParam.IsNotImplemented(3)})--	#end
#if(${tmpltHelper.checkDetailContent(3,${rtcParam})})		${rtcParam.getDetailContent(3)}
#end

	#if(${rtcParam.IsNotImplemented(3)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(3)})--	#end${end}

#if(${rtcParam.getDocActionOverView(4).length()}>0)	#if(${rtcParam.IsNotImplemented(4)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(4)})}
#end
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus} The activated action (Active state entry action)
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus} former rtc_active_entry()
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(4)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(4).length()}>0)	#if(${rtcParam.IsNotImplemented(4)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(4)})}
#end
#if(${rtcParam.getDocActionPostCondition(4).length()}>0)	#if(${rtcParam.IsNotImplemented(4)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(4)})}
#end
	#if(${rtcParam.IsNotImplemented(4)})--#end${minusminus}
	#if(${rtcParam.IsNotImplemented(4)})--#end${function} obj:onActivated(ec_id)
	#if(${rtcParam.IsNotImplemented(4)})--#end
#if(${tmpltHelper.checkDetailContent(4,${rtcParam})})		${rtcParam.getDetailContent(4)}
#end

	#if(${rtcParam.IsNotImplemented(4)})--#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(4)})--#end${end}

#if(${rtcParam.getDocActionOverView(5).length()}>0)	#if(${rtcParam.IsNotImplemented(5)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(5)})}
#end
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus} The deactivated action (Active state exit action)
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus} former rtc_active_exit()
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(5).length()}>0)	#if(${rtcParam.IsNotImplemented(5)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(5)})}
#end
#if(${rtcParam.getDocActionPostCondition(5).length()}>0)	#if(${rtcParam.IsNotImplemented(5)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(5)})}
#end
	#if(${rtcParam.IsNotImplemented(5)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(5)})--	#end${function} obj:onDeactivated(ec_id)
	#if(${rtcParam.IsNotImplemented(5)})--	#end
#if(${tmpltHelper.checkDetailContent(5,${rtcParam})})		${rtcParam.getDetailContent(5)}
#end

	#if(${rtcParam.IsNotImplemented(5)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(5)})--	#end${end}

#if(${rtcParam.getDocActionOverView(9).length()}>0)	#if(${rtcParam.IsNotImplemented(9)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(9)})}
#end
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus} The execution action that is invoked periodically
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus} former rtc_active_do()
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(9).length()}>0)	#if(${rtcParam.IsNotImplemented(9)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(9)})}
#end
#if(${rtcParam.getDocActionPostCondition(9).length()}>0)	#if(${rtcParam.IsNotImplemented(9)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(9)})}
#end
	#if(${rtcParam.IsNotImplemented(9)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(9)})--	#end${function} obj:onExecute(ec_id)
	#if(${rtcParam.IsNotImplemented(9)})--	#end
#if(${tmpltHelper.checkDetailContent(9,${rtcParam})})		${rtcParam.getDetailContent(9)}
#end

	#if(${rtcParam.IsNotImplemented(9)})--#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(9)})--#end${end}

#if(${rtcParam.getDocActionOverView(6).length()}>0)	#if(${rtcParam.IsNotImplemented(6)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(6)})}
#end
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus} The aborting action when main logic error occurred.
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus} former rtc_aborting_entry()
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(6).length()}>0)	#if(${rtcParam.IsNotImplemented(6)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(6)})}
#end
#if(${rtcParam.getDocActionPostCondition(6).length()}>0)	#if(${rtcParam.IsNotImplemented(6)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(6)})}
#end
	#if(${rtcParam.IsNotImplemented(6)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(6)})--	#end${function} obj:onAborting(ec_id)
	#if(${rtcParam.IsNotImplemented(6)})--	#end
#if(${tmpltHelper.checkDetailContent(6,${rtcParam})})		${rtcParam.getDetailContent(6)}
#end

	#if(${rtcParam.IsNotImplemented(6)})--#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(6)})--#end${end}

#if(${rtcParam.getDocActionOverView(7).length()}>0)	#if(${rtcParam.IsNotImplemented(7)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(7)})}
#end
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus} The error action in ERROR state
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus} former rtc_error_do()
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(7).length()}>0)	#if(${rtcParam.IsNotImplemented(7)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(7)})}
#end
#if(${rtcParam.getDocActionPostCondition(7).length()}>0)	#if(${rtcParam.IsNotImplemented(7)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(7)})}
#end
	#if(${rtcParam.IsNotImplemented(7)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(7)})--	#end${function} obj:onError(ec_id)
	#if(${rtcParam.IsNotImplemented(7)})--	#end
#if(${tmpltHelper.checkDetailContent(7,${rtcParam})})		${rtcParam.getDetailContent(7)}
#end

	#if(${rtcParam.IsNotImplemented(7)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(7)})--	#end${end}

#if(${rtcParam.getDocActionOverView(8).length()}>0)	#if(${rtcParam.IsNotImplemented(8)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(8)})}
#end
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus} The reset action that is invoked resetting
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus} This is same but different the former rtc_init_entry()
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(8).length()}>0)	#if(${rtcParam.IsNotImplemented(8)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(8)})}
#end
#if(${rtcParam.getDocActionPostCondition(8).length()}>0)	#if(${rtcParam.IsNotImplemented(8)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(8)})}
#end
	#if(${rtcParam.IsNotImplemented(8)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(8)})--	#end${function} obj:onReset(ec_id)
	#if(${rtcParam.IsNotImplemented(8)})--	#end
#if(${tmpltHelper.checkDetailContent(8,${rtcParam})})		${rtcParam.getDetailContent(8)}
#end

	#if(${rtcParam.IsNotImplemented(8)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(8)})--	#end${end}

#if(${rtcParam.getDocActionOverView(10).length()}>0)	#if(${rtcParam.IsNotImplemented(10)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(10)})}
#end
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus} The state update action that is invoked after onExecute() action
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus} no corresponding operation exists in OpenRTm-aist-0.2.0
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus}

#if(${rtcParam.getDocActionPreCondition(10).length()}>0)	#if(${rtcParam.IsNotImplemented(10)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(10)})}
#end
#if(${rtcParam.getDocActionPostCondition(10).length()}>0)	#if(${rtcParam.IsNotImplemented(10)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(10)})}
#end
	#if(${rtcParam.IsNotImplemented(10)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(10)})--	#end${function} obj:onStateUpdate(ec_id)
	#if(${rtcParam.IsNotImplemented(10)})--	#end
#if(${tmpltHelper.checkDetailContent(10,${rtcParam})})		${rtcParam.getDetailContent(10)}
#end

	#if(${rtcParam.IsNotImplemented(10)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(10)})--	#end${end}

#if(${rtcParam.getDocActionOverView(11).length()}>0)	#if(${rtcParam.IsNotImplemented(11)})--#end${minusminus} ${tmpltHelperLua.convertActivityDocLua(${rtcParam.getDocActionOverView(11)})}
#end
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus} The action that is invoked when execution context's rate is changed
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus} no corresponding operation exists in OpenRTm-aist-0.2.0
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus} @param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus} @return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus}
#if(${rtcParam.getDocActionPreCondition(11).length()}>0)	#if(${rtcParam.IsNotImplemented(11)})--#end	-- @pre ${tmpltHelperLua.convertPreShDocLua(${rtcParam.getDocActionPreCondition(11)})}
#end
#if(${rtcParam.getDocActionPostCondition(11).length()}>0)	#if(${rtcParam.IsNotImplemented(11)})--#end	-- @post ${tmpltHelperLua.convertPostShDocLua(${rtcParam.getDocActionPostCondition(11)})}
#end
	#if(${rtcParam.IsNotImplemented(11)})--	#end${minusminus}
	#if(${rtcParam.IsNotImplemented(11)})--	#end${function} obj:onRateChanged(ec_id)
	#if(${rtcParam.IsNotImplemented(11)})--	#end
#if(${tmpltHelper.checkDetailContent(11,${rtcParam})})		${rtcParam.getDetailContent(11)}
#end

	#if(${rtcParam.IsNotImplemented(11)})--	#end	return self._ReturnCode_t.RTC_OK
	#if(${rtcParam.IsNotImplemented(11)})--	#end${end}
	return obj
end


local MyModuleInit = function(manager)
    ${rtcParam.name}Test.Init(manager)

    -- Create a component
    local comp = manager:createComponent("${rtcParam.name}Test")
end

if openrtm.Manager.is_main() then
	local manager = openrtm.Manager
	manager:init(arg)
	manager:setModuleInitProc(MyModuleInit)
	manager:activateManager()
	manager:runManager()
else
	return ${rtcParam.name}Test
end

